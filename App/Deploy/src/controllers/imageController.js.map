{"version":3,"sources":["../../src/controllers/imageController.js"],"names":["require","config","cloudinary","cloud_name","process","env","CLOUD_NAME","api_key","CLOUD_API_KEY","api_secret","CLOUD_API_SECRET","findImagelimit","req","res","imageModel","find","err","image","status","json","message","error","limit","exec","send","findImage","findImageUser","owner","headers","authorization","upload","next","imageFile","files","file","type","mimetype","split","id","publicUrl","HOST_APP","data_uri_prefix","base64Image","data","toString","imageUri","v2","uploader","result","mv","name","url","user","save"],"mappings":"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","file":"imageController.js","sourcesContent":["import uuidV1 from \"uuid/v1\";\nimport cloudinary from \"cloudinary\";\nrequire(\"dotenv\").config();\n\nimport imageModel from \"../models/imageModel.js\";\n\n\ncloudinary.config({\n  cloud_name: process.env.CLOUD_NAME,\n  api_key: process.env.CLOUD_API_KEY,\n  api_secret: process.env.CLOUD_API_SECRET\n});\n\nexport default {\n  findImagelimit(req, res) {\n    imageModel\n      .find((err, image) => {\n        if (err) {\n          return res.status(500).json({\n            message: \"Error when getting user.\",\n            error: err\n          });\n        }\n      })\n      .limit(10)\n      .exec((err, image) => {\n        if (err) return res.status(500).send(err);\n        return res.status(202).json(image);\n      });\n  },\n\n  findImage(req, res) {\n    imageModel.find((err, image) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting image.\",\n          error: err\n        });\n      }\n      return res.json(image);\n    });\n  },\n\n  findImageUser(req, res) {\n    imageModel.find({ owner: req.headers.authorization }).exec((err, image) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting image.\",\n          error: err\n        });\n      }\n      return res.json(image);\n    });\n  },\n\n  upload(req, res, next) {\n    let imageFile = req.files.file;\n    const type = imageFile.mimetype.split(\"/\")[1];\n    let id = uuidV1();\n    const publicUrl = `${process.env.HOST_APP}/public/${id}.${type}`;\n    const   data_uri_prefix = \"data:\" + imageFile.mimetype + \";base64,\"\n    const base64Image = req.files.file.data.toString('base64');\n    const    imageUri = data_uri_prefix + base64Image\n\n    cloudinary.v2.uploader.upload(imageUri, (error, result) => {\nif(error){\n    imageFile.mv(`./public/${id}.${type}`, err => {\n      if (err) {\n        return res.status(500).send(err);\n      }\n    });\n}\n      const image = new imageModel({\n        name: imageFile.name,\n        type: imageFile.mimetype,\n        url: result ? result.url : publicUrl,\n        owner: req.headers.user ? req.headers.user : \"admin\"\n      });\n\n      image.save((err, image) => {\n        if (err) {\n          return res.status(500).json({\n            message: \"Error when creating image\",\n            error: err\n          });\n        }\n        return res.status(201).json(image);\n      });\n    });\n  }\n};\n"]}